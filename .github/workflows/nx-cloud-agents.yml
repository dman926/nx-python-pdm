# Modified from https://github.com/nrwl/ci/blob/main/.github/workflows/nx-cloud-agents.yml
name: Nx Cloud Agents

on:
  workflow_call:
    inputs:
      number-of-agents:
        required: true
        type: number
      environment-variables:
        required: false
        type: string
      node-version:
        required: false
        type: string
      yarn-version:
        required: false
        type: string
      npm-version:
        required: false
        type: string
      pnpm-version:
        required: false
        type: string
      install-commands:
        required: false
        type: string
      init-commands:
        required: false
        type: string
      runs-on:
        required: false
        type: string
        default: ubuntu-latest
      python-version:
        required: false
        type: string
        default: '3.x'

env:
  NX_CLOUD_DISTRIBUTED_EXECUTION: true
  NX_BRANCH: ${{ github.event.number || github.ref_name }}
  NX_CLOUD_AUTH_TOKEN: ${{ secrets.NX_CLOUD_AUTH_TOKEN }}

jobs:
  set-agents:
    runs-on: ${{ inputs.runs-on }}
    name: Init
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - id: set-matrix
        shell: bash
        # Turn the number-of-agents input into a JSON structure which is compatible with a Github job matrix strategy
        # 50 names
        # Number of agents is capped at the length of this string
        # Shouldn't be an issue unless something crazy is happening

        run: |
          AGENT_NAMES="47,Smith,Fury,Ash,J,Bond,Double-O-Seven,X,Stealth,Shadow,Nova,Triple-O,Octave,Lana,Max,Sydney,Vaughn,Sloane,Michael,Fiona,Sam,Ethan,Hunt,Bourne,Nash,McClane,Bryan,John,Jack,Martin,Jason,Frank,Eve,Villeneuve"
          AGENT_NAMES=($(echo "${AGENT_NAMES}" | tr "," "\n"))
          agents_to_choose=$((${#AGENT_NAMES[@]} > ${{inputs.number-of-agents}} ? ${{inputs.number-of-agents}} : ${#AGENT_NAMES[@]}))
          random_agents=""
          for ((i=0; i < agents_to_choose; i++)); do
            random_index=$((RANDOM % ${#AGENT_NAMES[@]}));
            random_agent=("${AGENT_NAMES[random_index]}")
            if [ $i -eq 0 ]; then
            random_agents="$random_agent"
            else
              random_agents="${random_agents},${random_agent}"
            fi
            unset AGENT_NAMES[random_index];
          done
          AGENTS_JSON_ARRAY=$(echo "$random_agents" | jq -R 'split(",")' | jq -c '.')
          echo $AGENTS_JSON_ARRAY
          echo "matrix=$AGENTS_JSON_ARRAY" >> $GITHUB_OUTPUT

  Run:
    needs: set-agents
    runs-on: ${{ inputs.runs-on }}
    name: Agent ${{ matrix.agent }}
    strategy:
      matrix:
        agent:
          - ${{fromJson(needs.set-agents.outputs.matrix)}}
    defaults:
      run:
        working-directory: ${{ github.workspace }}
        # Specify shell to help normalize across different operating systems
        shell: bash
    steps:
      - uses: actions/checkout@ac593985615ec2ede58e132d2e21d2b1cbd6127c # pin@v3

      - name: Setup PDM for Python ${{ inputs.python-version }}
        uses: pdm-project/setup-pdm@v3
        with:
          python-version: ${{ inputs.python-version }}  # Version range or exact version of a Python version to use, the same as actions/setup-python
          update-python: true

      - name: Detect package manager
        id: package_manager
        run: |
          echo "name=$([[ -f ./yarn.lock ]] && echo "yarn" || ([[ -f ./pnpm-lock.yaml ]] && echo "pnpm") || echo "npm")" >> $GITHUB_OUTPUT

      # Set node/npm/yarn versions using volta, with optional overrides provided by the consumer
      - uses: volta-cli/action@25888009cd70dbe17a140f1c56d93f8c09f7bcef # pin@v4
        with:
          node-version: '${{ inputs.node-version }}'
          npm-version: '${{ inputs.npm-version }}'
          yarn-version: '${{ inputs.yarn-version }}'

      # Install pnpm with exact version provided by consumer or fallback to latest
      - name: Install PNPM
        if: steps.package_manager.outputs.name == 'pnpm'
        uses: pnpm/action-setup@c3b53f6a16e57305370b4ae5a540c2077a1d50dd # pin@v2
        with:
          version: ${{ inputs.pnpm-version || 'latest' }}

      - name: Print node/npm/yarn versions
        id: versions
        run: |
          node_ver=$( node --version )
          yarn_ver=$( yarn --version || true )
          pnpm_ver=$( pnpm --version || true )

          echo "Node: ${node_ver:1}"
          echo "NPM: $( npm --version )"
          if [[ $yarn_ver != '' ]]; then echo "Yarn: $yarn_ver"; fi
          if [[ $pnpm_ver != '' ]]; then echo "PNPM: $pnpm_ver"; fi

          echo "node_version=${node_ver:1}" >> $GITHUB_OUTPUT
          echo "yarn_version=${yarn_ver:1}" >> $GITHUB_OUTPUT

      - name: Use the node_modules cache if available [npm]
        if: steps.package_manager.outputs.name == 'npm'
        uses: actions/cache@69d9d449aced6a2ede0bc19182fadc3a0a42d2b0 # pin@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ steps.versions.outputs.node_version }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-${{ steps.versions.outputs.node_version }}-

      - name: Get pnpm cache directory path
        if: steps.package_manager.outputs.name == 'pnpm'
        id: pnpm-cache-dir-path
        run: echo "dir=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: Use the node_modules cache if available [pnpm]
        if: steps.package_manager.outputs.name == 'pnpm'
        uses: actions/cache@69d9d449aced6a2ede0bc19182fadc3a0a42d2b0 # pin@v3
        with:
          path: ${{ steps.pnpm-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-node-${{ steps.versions.outputs.node_version }}-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-node-${{ steps.versions.outputs.node_version }}-

      - name: Get yarn cache directory path [yarn 1.x]
        if: steps.package_manager.outputs.name == 'yarn' && startsWith(steps.versions.outputs.yarn_version, '1.')
        id: yarn-cache-dir-path
        run: echo "dir=$(yarn cache dir)" >> $GITHUB_OUTPUT

      - name: Use the node_modules cache if available [yarn 1.x]
        if: steps.package_manager.outputs.name == 'yarn' && startsWith(steps.versions.outputs.yarn_version, '1.')
        uses: actions/cache@69d9d449aced6a2ede0bc19182fadc3a0a42d2b0 # pin@v3
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-node-${{ steps.versions.outputs.node_version }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-node-${{ steps.versions.outputs.node_version }}-yarn-

      - name: Get yarn cache directory path [yarn berry]
        if: steps.package_manager.outputs.name == 'yarn' && !startsWith(steps.versions.outputs.yarn_version, '1.')
        id: yarn-berry-cache-dir-path
        run: echo "dir=$(yarn config get cacheFolder)" >> $GITHUB_OUTPUT

      - name: Use the node_modules cache if available [yarn berry]
        if: steps.package_manager.outputs.name == 'yarn' && !startsWith(steps.versions.outputs.yarn_version, '1.')
        uses: actions/cache@69d9d449aced6a2ede0bc19182fadc3a0a42d2b0 # pin@v3
        with:
          path: ${{ steps.yarn-berry-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-node-${{ steps.versions.outputs.node_version }}-yarn-berry-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-node-${{ steps.versions.outputs.node_version }}-yarn-berry-

      - name: Process environment-variables
        if: ${{ inputs.environment-variables != '' }}
        uses: actions/github-script@98814c53be79b1d30f795b907e553d8679345975 # pin@v6
        env:
          ENV_VARS: ${{ inputs.environment-variables }}
        with:
          script: |
            const { appendFileSync } = require('fs');

            // trim spaces and escape quotes
            const cleanStr = str => str
              .trim()
              .replaceAll(/`/g, "\`");

            // parse variable to correct type
            const parseStr = str =>
              str === 'true' || str === 'TRUE'
                ? true
                : str === 'false' || str === 'FALSE'
                  ? false
                  : isNaN(str)
                    ? str
                    : parseFloat(str);

            const varsStr = process.env.ENV_VARS || '';
            const vars = varsStr
              .split('\n')
              .map(variable => variable.trim())
              .filter(variable => variable.indexOf('=') > 0)
              .map(variable => ({
                name: cleanStr(variable.split('=')[0]),
                value: cleanStr(variable.slice(variable.indexOf('=') + 1))
              }));

            for (const v of vars) {
              console.log(`Appending environment variable \`${v.name}\` with value \`${v.value}\` to ${process.env.GITHUB_ENV}`);
              appendFileSync(process.env.GITHUB_ENV, `${v.name}=${parseStr(v.value)}\n`);
            }

      - name: Run any configured install-commands
        if: ${{ inputs.install-commands != '' }}
        run: |
          ${{ inputs.install-commands }}

      - name: Install dependencies
        if: ${{ inputs.install-commands == '' }}
        run: |
          if [ "${{ steps.package_manager.outputs.name == 'yarn' }}" == "true" ]; then
            if [ "${{ startsWith(steps.versions.outputs.yarn_version, '1.') }}" == "true" ]; then
              echo "Running yarn install --frozen-lockfile"
              yarn install --frozen-lockfile
            else
              echo "Running yarn install --immutable"
              yarn install --immutable
            fi
          elif [ "${{ steps.package_manager.outputs.name == 'pnpm' }}" == "true" ]; then
            echo "Running pnpm install --frozen-lockfile"
            pnpm install --frozen-lockfile
          else
            echo "Running npm ci"
            npm ci
          fi

      # The good thing about the multi-line string input for sequential commands is that we can simply forward it on as is to the bash shell and it will behave
      # how we want it to in terms of quote escaping, variable assignment etc
      - name: Run any configured init-commands sequentially
        if: ${{ inputs.init-commands != '' }}
        run: |
          ${{ inputs.init-commands }}

      - name: Start Nx Agent ${{ matrix.agent }}
        run: npx nx-cloud start-agent
        env:
          NX_AGENT_NAME: ${{matrix.agent}}
